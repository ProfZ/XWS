/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package xml.project.wsdl.cbwsdl;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.logging.Logger;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;

import rest.bundle.RequestMethod;
import rest.util.RESTUtil;
import rest.util.Validation;
import xml.project.globals.StatusCode;
import xml.project.mt102.MT102;
import xml.project.mt103.MT103;
import xml.project.mt900.MT900;
import xml.project.mt910.MT910;
import xml.project.racuni.Racuni;
import xml.project.racuni.Racuni.FirmaRacun;
import xml.project.racuni.Racuni.FirmaRacun.Racun;

/**
 * This class was generated by Apache CXF 2.6.5 2015-06-19T14:18:45.242+02:00
 * Generated source version: 2.6.5
 * 
 */


@javax.jws.WebService(
                      serviceName = "CentralnaBankaService",
                      portName = "CentralnaBankaPort",
                      targetNamespace = "http://www.project.xml/wsdl/CBwsdl",
                      wsdlLocation = "WEB-INF/wsdl/CentralnaBanka.wsdl",
                      endpointInterface = "xml.project.wsdl.cbwsdl.CentralnaBanka")
                      

public class CentralnaBankaImpl implements CentralnaBanka {

	private static final Logger LOG = Logger.getLogger(CentralnaBankaImpl.class
			.getName());

	public static final String MT102_Putanja = "CBMT102";
	public static final String Racuni_Putanja = "CBRacuni";
	public static final String MT103_Putanja = "CBMT103";
	
	public static final String B = "http://www.project.xml/wsdl/CBwsdl";
	public static final String BSERVICE = "FirmaBankaService";
	public static final String BPORT = "FirmaBanci";

	public static final String BANKA1 = "http://localhost:8080/5._VezebeWSDLWS/FirmaBankaService?wsdl";
	public static final String BANKA2 = "http://localhost:8080/5._VezebeWSDLWS2/FirmaBankaService?wsdl";

	public static HashMap<String, String> adreseBanki = null;

	private URL cbwsdl;
	private QName serviceName;
	private QName portName;
	private Service service;
	private FirmaBanci banka;

	static {
		adreseBanki = new HashMap<String, String>();
		adreseBanki.put("100", BANKA1);
		adreseBanki.put("101", BANKA2);
	}

	private List<FirmaRacun> racuni;

	/*
	 * (non-Javadoc)
	 * 
	 * @see xml.project.wsdl.cbwsdl.CentralnaBanka#acceptMT103(MT103 mt103 )*
	 */
	public MT900 acceptMT103(MT103 mt103) throws AcceptMT103Fault {
		LOG.info("Executing operation acceptMT103");
		System.out.println(mt103);
		MT900 _return = new MT900();
		try {
			String adresaPrimaoca = mt103.getBankaPoverilac().getObracunskiRacunBanke().substring(0, 3);
			if (!checkBanka(mt103.getBankaDuznik().getObracunskiRacunBanke()
					.substring(0, 3), mt103.getBankaDuznik().getSWIFTKodBanke())) {
				throw new Exception("Invalid sender bank.");
			}
			if (!checkBanka(adresaPrimaoca, mt103.getBankaPoverilac()
					.getSWIFTKodBanke())) {
				throw new Exception("Invalid reciever bank.");
			}
			this.cbwsdl = new URL(adreseBanki.get(adresaPrimaoca));
			this.serviceName = new QName(B, BSERVICE);
			this.portName = new QName(B, BPORT);
			this.service = Service.create(this.cbwsdl, this.serviceName);
			this.banka = service.getPort(this.portName, FirmaBanci.class);
			
			StatusCode code = banka.acceptMT103(mt103);
			if(code.getCode() != 200) {
				throw new Exception("Not found account in reciever bank.");
			}
			FirmaRacun r1 = nadjiRacun(mt103.getBankaDuznik().getObracunskiRacunBanke());
			if(r1.getRaspoloziviNovac().compareTo(mt103.getIznos()) == -1 ){
				throw new Exception("Invalid balance.");
			}
			r1.setRaspoloziviNovac(r1.getRaspoloziviNovac().subtract(mt103.getIznos()));
			
			MT910 mt910 = new MT910();
			mt910.setBankaPoverilac(mt103.getBankaPoverilac());
			mt910.setDatum(mt103.getDatumNaloga());
			mt910.setDatumValute(mt103.getDatumValute());
			mt910.setIDPorukeNaloga(mt103.getIDPoruke());
			mt910.setIznos(mt103.getIznos());
			mt910.setSifraValute(mt103.getValuta());
			Random rnd = new Random();
			mt910.setIDPoruke(rnd.nextInt(100000000) + "");
			
			StatusCode code2 = banka.acceptMT910(mt910);
			if(code2.getCode() != 200) {
				r1.setRaspoloziviNovac(r1.getRaspoloziviNovac().add(mt103.getIznos()));
				saveRacuni();
				throw new Exception("Problem in reciever bank with recieving money. Try later :D");
			}
			saveRacuni();
			
			_return.setBankaDuznik(mt103.getBankaDuznik());
			_return.setDatum(mt103.getDatumNaloga());
			_return.setDatumValute(mt103.getDatumValute());
			_return.setIDPoruke(rnd.nextInt(100000000) + "");
			_return.setIDPorukeNaloga(mt103.getIDPoruke());
			_return.setIznos(mt103.getIznos());
			_return.setSifraValute(mt103.getValuta());
			RESTUtil.objectToDB(MT103_Putanja, mt103.getIDPoruke().toString(),
					mt103);
			return _return;
		} catch (java.lang.Exception ex) {
			_return.setIDPoruke("__"+ex.getMessage());
			return _return;
			//ex.printStackTrace();
			//throw new RuntimeException(ex);
		}
		// throw new AcceptMT103Fault("acceptMT103Fault...");
	}

	public void saveRacuni() {
		RESTUtil.objectToDB("//"+Racuni_Putanja, "", racuni);
	}
	
	public boolean checkBanka(String ID, String swift) {
		if (ID == null || ID.trim().equals("") || !adreseBanki.containsKey(ID))
			return false;
		String SW = this.getSWIFT(ID);
		if (SW == null || !SW.equals(swift))
			return false;

		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see xml.project.wsdl.cbwsdl.CentralnaBanka#acceptMT102(MT102 mt102 )*
	 */
	public StatusCode acceptMT102(MT102 mt102) {
		LOG.info("Executing operation acceptMT102");
		System.out.println(mt102);
		try {
			StatusCode _return = new StatusCode();
			_return.setMessage("AKO USPEM IDEM DA JEDEM!!!");
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	public void init() {
		try {
			this.racuni = new ArrayList<FirmaRacun>();
			InputStream in = RESTUtil.retrieveResource("*", Racuni_Putanja,
					RequestMethod.GET);
			JAXBContext context = JAXBContext.newInstance(Racuni.class,
					Racuni.class);
			Unmarshaller unmarshaller = context.createUnmarshaller();
			Marshaller marshaller = context.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
			String xml = "";
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			for (String line; (line = br.readLine()) != null;) {
				xml = xml + line + "\n";
			}
			StringReader reader = new StringReader(xml);
			Racuni rac = (Racuni) unmarshaller.unmarshal(reader);
			for (FirmaRacun k : rac.getFirmaRacun()) {
				racuni.add(k);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private FirmaRacun nadjiRacun(String string) {
		BigInteger racunBroj = new BigInteger(string);
		for (FirmaRacun racun : racuni) {
			if (racun.getRacun().getBrojRacuna().equals(racunBroj)) {
				return racun;
			}
		}
		return null;
	}

	public void createInitial() {
		try {
			System.out.println(RESTUtil.createSchema(MT102_Putanja));
			System.out.println(RESTUtil.createSchema(MT103_Putanja));
			System.out.println(RESTUtil.createSchema(Racuni_Putanja));
			Racuni rac = new Racuni();
			Racuni.FirmaRacun fr = new FirmaRacun();
			fr.setNaziv("100");
			Racun r = new Racun();
			String deoRac = "1004567890123456";
			r.setBrojRacuna(new BigInteger(deoRac
					+ Validation.generateChecksum(deoRac)));
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar date2 = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			r.setDatumRacuna(date2);
			fr.setRacun(r);
			fr.setRaspoloziviNovac(new BigDecimal(100000));
			fr.setValuta("RSD");
			fr.setTSWIFT("AMAARS23");
			FirmaRacun fr2 = new FirmaRacun();
			fr2.setNaziv("101");
			Racun r2 = new Racun();
			String deoRac2 = "1014567891234567";
			r2.setBrojRacuna(new BigInteger(deoRac2
					+ Validation.generateChecksum(deoRac2)));
			r2.setDatumRacuna(date2);
			fr2.setRacun(r2);
			fr2.setRaspoloziviNovac(new BigDecimal(20000));
			fr2.setValuta("RSD");
			fr2.setTSWIFT("AMAARS22");
			ArrayList<FirmaRacun> racc = new ArrayList<FirmaRacun>();
			racc.add(fr);
			racc.add(fr2);
			rac.setFirmaRacun(racc);
			RESTUtil.objectToDB("//" + Racuni_Putanja, "", rac);
			Racuni temp = new Racuni();
			temp = (Racuni) RESTUtil.doUnmarshall("*", Racuni_Putanja, temp);
			System.out.println(temp + " " + temp.getFirmaRacun().size());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String TEST() {
		return "RADI!???!";
	}

	@Override
	public String getSWIFT(String racun) {
		if (racuni == null) {
			// mora ovako jer se ponasa kao stateless
			this.init();
		}
		for (FirmaRacun rac : racuni) {
			if (rac.getNaziv().equals(racun)) {
				String _return = rac.getTSWIFT() + ","
						+ rac.getRacun().getBrojRacuna();
				System.out.println(_return);
				return _return;
			}
		}
		return null;
	}

	public static void main(String[] args) {
		CentralnaBankaImpl cbi = new CentralnaBankaImpl();
		// cbi.createInitial();
		cbi.init();
	}
}
