/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package xml.project.wsdl.bwsdl;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import rest.bundle.RequestMethod;
import rest.util.RESTUtil;
import rest.util.Validation;
import xml.project.globals.StatusCode;
import xml.project.globals.TBanke;
import xml.project.mt102.MT102;
import xml.project.mt103.MT103;
import xml.project.mt910.MT910;
import xml.project.presek.Presek;
import xml.project.racuni.Racuni;
import xml.project.racuni.Racuni.FirmaRacun;
import xml.project.racuni.Racuni.FirmaRacun.Racun;
import xml.project.uplatnica.NalogZaPrenos;
import xml.project.zahtev_za_izovd.Zahtev;

/**
 * This class was generated by Apache CXF 2.6.5 2015-06-19T14:18:53.426+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(serviceName = "FirmaBankaService", portName = "FirmaBanci", targetNamespace = "http://www.project.xml/wsdl/bwsdl", wsdlLocation = "WEB-INF/wsdl/Banka.wsdl", endpointInterface = "xml.project.wsdl.bwsdl.FirmaBanci")
public class FirmaBanciImpl implements FirmaBanci {

	private List<FirmaRacun> racuni;
	TBanke banka;
	private static final Logger LOG = Logger.getLogger(FirmaBanciImpl.class
			.getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see xml.project.wsdl.bwsdl.FirmaBanci#doClearing(*
	 */
	public StatusCode doClearing() {
		LOG.info("Executing operation doClearing");
		try {
			StatusCode _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * xml.project.wsdl.bwsdl.FirmaBanci#acceptMT910(xml.project.mt910.MT910
	 * mt910 )*
	 */
	public StatusCode acceptMT910(MT910 mt910) {
		LOG.info("Executing operation acceptMT910");
		System.out.println(mt910);

		try {
			StatusCode _return = new StatusCode();
			RESTUtil.objectToDB("Banka/MT910", mt910.getIDPoruke(), mt910);

			String idPorukeNaloga = mt910.getIDPorukeNaloga(); // obrazac MT103
			MT103 mt103Temp = new MT103();

			// rtgs nalog
			mt103Temp = (MT103) RESTUtil.doUnmarshall(
					"//" + mt910.getIDPorukeNaloga(), "", mt103Temp);
			String racunPoverioca = mt103Temp.getBankaPoverilac()
					.getObracunskiRacunBanke();
			BigDecimal iznos = mt103Temp.getIznos();

			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * xml.project.wsdl.bwsdl.FirmaBanci#acceptMT102(xml.project.mt102.MT102
	 * mt102 )*
	 */
	public StatusCode acceptMT102(MT102 mt102) {
		LOG.info("Executing operation acceptMT102");
		System.out.println(mt102);
		try {
			StatusCode _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * xml.project.wsdl.bwsdl.FirmaBanci#acceptMT103(xml.project.mt103.MT103
	 * mt103 )*
	 */
	public StatusCode acceptMT103(MT103 mt103) {
		LOG.info("Executing operation acceptMT103");
		System.out.println(mt103);
		BankaChecker bc = new BankaChecker();
		StatusCode _return = new StatusCode();
		try {
			if (bc.checkTBanka(mt103.getBankaDuznik())
					&& bc.checkTBanka(mt103.getBankaPoverilac())) {
				throw new Exception("Invalid banks in transaction.");
			}
			if (bc.checkTOsoba(mt103.getDuznikNalogodavac())
					&& bc.checkTOsoba(mt103.getPrimalacPoverilac())) {
				throw new Exception("Invalid participants in transaction.");
			}
			FirmaRacun racun = findFirmu(mt103.getPrimalacPoverilac().getRacun());
			if(racun == null) {
				throw new Exception("Not existing firma.");
			}
			RESTUtil.objectToDB("//Transakcije", mt103.getIDPoruke().toString(), mt103);
			_return.setMessage("OK");
			return _return;
		} catch (Exception ex) {
			_return.setMessage("ERROR");
			return _return;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see xml.project.wsdl.bwsdl.FirmaBanci#primiNalog(xml.project.uplatnica.
	 * NalogZaPrenos nalogZaPrenos )*
	 */
	public StatusCode primiNalog(NalogZaPrenos nalogZaPrenos) {
		LOG.info("Executing operation primiNalog");
		System.out.println(nalogZaPrenos);
		try {
			StatusCode _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * xml.project.wsdl.bwsdl.FirmaBanci#traziIzvod(xml.project.zahtev_za_izovd
	 * .Zahtev zaDatum )*
	 */
	public Presek traziIzvod(Zahtev zaDatum) {
		LOG.info("Executing operation traziIzvod");
		System.out.println(zaDatum);
		try {
			Presek _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	public void init() {
		this.banka = new TBanke();
		this.racuni = new ArrayList<Racuni.FirmaRacun>();
		try {
			InputStream in = RESTUtil.retrieveResource("*", "Racuni/",
					RequestMethod.GET);
			JAXBContext context = JAXBContext.newInstance(Racuni.class,
					Racuni.class);
			Unmarshaller unmarshaller = context.createUnmarshaller();
			Marshaller marshaller = context.createMarshaller();
			// set optional properties
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

			String xml = "";
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			for (String line; (line = br.readLine()) != null;) {
				xml = xml + line + "\n";
			}
			StringReader reader = new StringReader(xml);
			Racuni rac = (Racuni) unmarshaller.unmarshal(reader);
			for (FirmaRacun k : rac.getFirmaRacun()) {
				racuni.add(k);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public FirmaRacun findFirmu(String string) {
		BigInteger racunBroj = new BigInteger(string);
		for (FirmaRacun racun : racuni) {
			if(racun.getRacun().getBrojRacuna().equals(racunBroj)){
				return racun;
			}
		}
		return null;
	}
	
	public void saveRacuni() {
		RESTUtil.objectToDB("//Racuni", "", racuni);
	}

	public void createInitial() {
		try {
			Racuni rac = new Racuni();
			Racuni.FirmaRacun fr = new FirmaRacun();
			fr.setNaziv("Pejak");
			Racun r = new Racun();
			String deoRac = "1234567890123456";
			r.setBrojRacuna(new BigInteger(deoRac
					+ Validation.generateChecksum(deoRac)));
			GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar date2 = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(c);
			r.setDatumRacuna(date2);
			fr.setRacun(r);
			fr.setRaspoloziviNovac(100);
			fr.setValuta("RSD");
			FirmaRacun fr2 = new FirmaRacun();
			fr2.setNaziv("Alex");
			Racun r2 = new Racun();
			String deoRac2 = "1234567891234567";
			r2.setBrojRacuna(new BigInteger(deoRac2
					+ Validation.generateChecksum(deoRac2)));
			r2.setDatumRacuna(date2);
			fr2.setRacun(r2);
			fr2.setRaspoloziviNovac(200);
			fr2.setValuta("RSD");
			ArrayList<FirmaRacun> racc = new ArrayList<Racuni.FirmaRacun>();
			racc.add(fr);
			racc.add(fr2);
			rac.setFirmaRacun(racc);
			RESTUtil.objectToDB("//Racuni", "", rac);
			Racuni temp = new Racuni();
			temp = (Racuni) RESTUtil.doUnmarshall("*", "Racuni/", temp);
			System.out.println(temp + " " + temp.getFirmaRacun().size());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		FirmaBanciImpl imp = new FirmaBanciImpl();
		//imp.createInitial();
		imp.init();
	}

}
